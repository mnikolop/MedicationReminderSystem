@{
    Response.ContentType = "text/xml";

    // Set our AccountSid and AuthToken
    string sid = "***********************";
    string token = "************************";
    
    // Outgoing Caller ID you have previously validated with Twilio
    string callerId = "+12064521464";

    // File Location for use in REST URL
    Uri cleanedUri = new Uri(Request.Url.GetComponents(UriComponents.AbsoluteUri & ~UriComponents.Port & ~UriComponents.Query, UriFormat.UriEscaped));
    string baseUri = cleanedUri.AbsoluteUri.Remove(cleanedUri.AbsoluteUri.Length - cleanedUri.Segments.Last().Length);
    
    var client = new Twilio.TwilioRestClient(sid, token);
    var twiml = new Twilio.TwiML.TwilioResponse();    
    // @start snippet
    if (Request["RecordingUrl"]==null)
    {
        // Warn the caller if we didn't find a recording URL
        twiml.Say("Error: No URL Stop");
    }
    else if (Request["from"]!=null)
    {
        VoiceHTContext ctx = new VoiceHTContext();
        
        string from = Request["from"];

        var contact = ctx.Contacts.Where(c => c.Caller == from).FirstOrDefault();
        if (contact == null)
        {
            // Warn the caller if we didn't find any contacts
            twiml.Say(string.Format("No Contacts could be found for {0}", from));
        }
        else 
        {
            // Call each contact
            foreach (var emergencycontact in contact.EmergencyContacts) 
            {
                try 
                {
                                
                    client.InitiateOutboundCall(callerId, emergencycontact.Number,
                        string.Format("{0}play.cshtml?url={1}", baseUri, Request["RecordingUrl"]));
                } 
                catch (Exception exc) 
                {
                    // log error
                }
            }
 
            twiml.Say("Your message has been broadcasted");
        }
    }
    // @end snippet
}
@Html.Raw(twiml.ToString())








